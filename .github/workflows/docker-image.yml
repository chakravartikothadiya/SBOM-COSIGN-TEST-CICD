name: SBOM and Image

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Generate new version tag
        id: generate-version-tag
        run: echo "::set-output name=tag::v$(date +'%Y%m%d%H%M%S')"

      - name: Build the Docker image
        run: docker build -t chakravartikothadiya/sample-ngnix-server:${{ steps.generate-version-tag.outputs.tag }} .

      - name: Log into Docker Hub (or other container registry)
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Get existing tags from Docker Hub repository
        id: get-existing-tags
        run: |
          IMAGE_NAME="chakravartikothadiya/sample-ngnix-server"
          DOCKERHUB_API="https://hub.docker.com/v2/repositories/${IMAGE_NAME}/tags"

          tags=$(curl -sSL -H "Authorization: Bearer ${{ secrets.DOCKER_PASSWORD }}" $DOCKERHUB_API | jq -r '.results[].name')

          if [[ -n $tags ]]; then
            echo "::set-output name=tags::$tags"
          else
            echo "No existing tags found in the repository."
            exit 1
          fi

      - name: Delete Initial Files from Docker Hub repository
        run: |
          tags="${{ steps.get-existing-tags.outputs.tags }}"

          # Check if tags array is null or empty
          if [ -z "$tags" ] || [ "$tags" == "null" ]; then
            echo "No existing tags found in the repository. Skipping deletion."
            exit 0
          fi

          # Delete each tag
          for tag in $tags
          do
            echo "Deleting tag: $tag"
            curl -sSL -H "Authorization: Bearer ${{ secrets.DOCKER_PASSWORD }}" -X DELETE "$DOCKERHUB_API/$tag/"
          done

      # Rest of the workflow steps remain the same

      - name: Push Docker image to registry
        run: docker push chakravartikothadiya/sample-ngnix-server:${{ steps.generate-version-tag.outputs.tag }}

      - name: Get Docker image digest
        id: get_digest
        run: |
          digest=$(docker image inspect --format='{{index .RepoDigests 0}}' chakravartikothadiya/sample-ngnix-server:${{ steps.generate-version-tag.outputs.tag }})
          echo "::set-output name=digest::$digest"

      - name: cosign-installer
        uses: sigstore/cosign-installer@v3.0.5

      - name: Sign image with a key
        run: |
          cosign sign --key env://COSIGN_PRIVATE_KEY ${{ steps.get_digest.outputs.digest }} -y
        env:
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}

      - name: Verify the image with public key
        run: |
          cosign verify --key env://COSIGN_PUBLIC_KEY ${{ steps.get_digest.outputs.digest }}
        env:
          COSIGN_PUBLIC_KEY: ${{ secrets.COSIGN_PUBLIC_KEY }}
